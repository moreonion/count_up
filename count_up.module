<?php

/**
 * @file
 * Code for the count_up feature.
 */

include_once 'count_up.features.inc';

/**
 * @file
 * Hook implementations for the count_up module.
 */

/**
 * Implements hook_libraries_info().
 */
function count_up_libraries_info() {
  $libraries['odometer'] = [
    'name' => 'odometer',
    'vendor url' => 'http://github.hubspot.com/odometer/',
    'download url' => 'https://github.com/HubSpot/odometer/releases',
    'version arguments' => [
      'file' => 'package.json',
      'pattern' => '"(\d+\.\d+\.\d+)"',
      'lines' => 5,
    ],
    'files' => [
      'css' => ['themes/odometer-theme-minimal.css' => []],
      'js' => ['odometer.min.js' => ['requires_jquery' => FALSE]],
    ],
  ];
  return $libraries;
}

/**
 * Implements hook_theme().
 */
function count_up_theme() {
  $theme['count_up'] = [
    'render element' => 'element',
    'template' => 'count_up',
    'file' => 'count_up.theme.inc',
  ];
  return $theme;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function count_up_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['field_name'] != 'count_up') {
    return;
  }

  $visibility_id = drupal_html_id('count_up-visibility');
  $visibility_state['#states']['visible']["#$visibility_id"]['checked'] = TRUE;
  $element['count_up_visibility']['und']['#id'] = $visibility_id;

  foreach (element_children($element) as $key) {
    if ($key != 'count_up_visibility') {
      $element[$key] += $visibility_state;
    }
  }
  $element['count_up_initial_time'][LANGUAGE_NONE][0]['#count_up_container'] = TRUE;
  $element['#attributes']['class'][] = 'field-group-heading';
}

/**
 * Implements hook_date_combo_process_alter().
 *
 * Render our datetime elements as containers.
 */
function count_up_date_combo_process_alter(&$element, $form_state, $context) {
  if (!empty($element['#count_up_container'])) {
    $element['#theme_wrappers'] = ['container'];
    $element['value'] += [
      '#title' => $element['#title'],
    ];
  }
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * Render the count_up field instead of a generic field collection.
 */
function count_up_field_attach_view_alter(&$output, $context) {
  if (isset($output['count_up'])) {
    // Check if the field should be displayed.
    $count_up_field = field_get_items('node', $context['entity'], 'count_up');
    $item = field_collection_item_load(reset($count_up_field)['value']);
    $visibility_field = field_get_items('field_collection_item', $item, 'count_up_visibility');
    if ($visibility_field && reset($visibility_field)['value'] == 0) {
      unset($output['count_up']);
      return;
    }

    module_load_include('theme.inc', 'entity', 'theme/entity');
    $element = reset($output['count_up'][0]['entity']['field_collection_item']);
    $variables['elements'] = &$element;
    template_preprocess_entity($variables);

    $entity = entity_metadata_wrapper('field_collection_item', $element['#entity']);
    $count_up = [
      '#theme' => 'count_up',
      '#increment' => $entity->count_up_increment->value(),
      '#interval' => $entity->count_up_interval->value(),
      '#initial_value' => $entity->count_up_initial_value->value(),
      '#initial_time' => $entity->count_up_initial_time->value(),
      '#pre_render' => ['count_up_pre_render'],
    ] + $variables['content'];
    $output['count_up'][0] = $count_up;
  }
}

/**
 * Pre render function for count_up elements.
 *
 * Generates drupal settings and adds the odometer settings.
 */
function count_up_pre_render($element) {
  $element += [
    '#odometer_settings' => [],
    '#update_interval' => 2000,
  ];
  $element['#odometer_settings'] += [
    'duration' => 2000,
  ];
  $element['#attached']['libraries_load'][] = ['odometer'];
  if (!isset($element['#id'])) {
    $element['#id'] = drupal_html_id('count_up');
  }
  $path = drupal_get_path('module', 'count_up');
  $element['#attached']['js']["$path/count_up.js"]['type'] = 'file';
  return $element;
}
